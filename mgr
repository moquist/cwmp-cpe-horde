#!/usr/bin/env bash

set -euo pipefail

[[ -z ${DEBUG+x} ]] || set -x

: "${REPO_ROOT:=$(git rev-parse --show-toplevel)}"

COMMAND=$1; shift || true

export IMAGE_BASE=${IMAGE_BASE:-cwmp-cpe-horde}
export IMAGE_VERSION=${IMAGE_VERSION:-$(./bin/voom-like-version .)}
export IMAGE_NAME=${IMAGE_NAME:-${IMAGE_BASE}:$IMAGE_VERSION}

CONTAINER_NAME=${CONTAINER_NAME:-${USER}-cwmp-cpe-horde}

if [ "$(command -v docker)" ]; then
    CONTAINER_EXEC=docker
elif [ "$(command -v podman)" ]; then
    CONTAINER_EXEC=podman
else
    no_containers_for_you() {
        >&2 echo "ERROR: neither docker nor podman found on \$PATH"
        exit 1
    }
    CONTAINER_EXEC=no_containers_for_you
fi

cd "${REPO_ROOT}"

function print_help() {
    cat <<EOF
Usage:

  mgr build                       => Run tests and build a voom-versioned docker/podman image.
  mgr check                       => lint, cljfmt, and run tests
  mgr cljfmt                      => Run cljfmt on uncommitted code. Set CLJFMT_ALL=1 to run cljfmt over the entire codebase.
  mgr help                        => Display this message
  mgr lint                        => Run clj-kondo lint in all modules
  mgr req                         => Check system requirements and print warnings.
  mgr run                         => Run cwmp-client-horde from source. Typical example: CONFIG_FILE_PATH=config.edn ./mgr run
  mgr test                        => Run all unit tests.
  mgr up                          => Run cwmp-client-horde docker/podman image. Typical example: IMAGE_NAME=cwmp-cpe-horde:20250607_195436-gfbcf556 CONFIG_FILE_PATH=config.edn ./mgr up
EOF
}

function die() {
    >&2 echo "$@"
    exit 1
}

function warn() {
    >&2 echo "$@"
}

function build() {
    lint
    cljfmt
    # unit-tests are run in the docker build to maximize assurance
    ${CONTAINER_EXEC} build \
           -t "${IMAGE_NAME}" \
           .
    >&2 echo "FYI, IMAGE_NAME=${IMAGE_NAME}"
}

function cljfmt() {
    CLJFMT_ALL=1 "${REPO_ROOT}/bin/cljfmt.sh"
}

function do-check() {
    lint
    cljfmt
    unit-tests
}

function down() {
    ${CONTAINER_EXEC} rm -v -f $CONTAINER_NAME
}

function lint() {
    "${REPO_ROOT}/bin/lint"
}

function req() {
    type -P bb &> /dev/null || warn "WARNING: bb (babashka) not found"
    type -P clj &> /dev/null || warn "WARNING: clj (Clojure runner) not found"
    type -P clj-kondo &> /dev/null || warn "WARNING: clj-kondo not found"
}

function run() {
    clj -M -m viasat.cwmp-cpe.main
}

function unit-tests() {
    "${REPO_ROOT}/bin/kaocha"
}

function up() {
    if [ ! -f "${CONFIG_FILE_PATH-/dev/null}" ]; then
        die "CONFIG_FILE_PATH must be specified and must be a regular file"
    fi
    down >& /dev/null
    ${CONTAINER_EXEC} run \
        -d \
        --name $CONTAINER_NAME \
        -e CONFIG_FILE_PATH=/tmp/config.edn \
        -v "${REPO_ROOT}/$CONFIG_FILE_PATH:/tmp/config.edn" \
        $IMAGE_NAME
}

req
case $COMMAND in
    build) build "$@" ;;
    check) do-check ;;
    cljfmt) cljfmt ;;
    down) down ;;
    lint) lint ;;
    req) req ;;
    run) run "$@" ;;
    test) unit-tests "$@" ;;
    up) up "$@" ;;
    *) print_help ;;
esac
